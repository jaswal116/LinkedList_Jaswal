package com.jaswal.resale.ticket;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Application;
import javax.ws.rs.core.Configuration;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.MultivaluedMap;
import javax.ws.rs.core.Request;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import javax.ws.rs.ext.Providers;

@Path("/rh")
public class HeaderContext {
	/*
	 * JAX-RS provides the @Context annotation to inject 
	 * a variety of resources in your RESTful services. 
		HTTP headers
		HTTP URI details
		Security Context
		Resource Context
		Request
		Configuration
		Application
		Providers
	 */
	
	@Context
	private UriInfo info;
	
	@Context
	private HttpServletRequest servletRequest;
	
	@Context
	private ServletContext servletContext;
	
	@Context
	private HttpHeaders headers;
	
	@Context
	private Request req;
	
	@Context
	private Application app;
	
	@Context
	private Configuration config;
	
	@Context
	private Providers provider;
	
	//we inject UriInfo, HttpServletRequest, and ServletContext into class fields with @Context.
	
			
		@Path("/ci")
		@GET
		@Produces(MediaType.TEXT_PLAIN)
		public Response message()
		{
			StringBuilder builder = new StringBuilder();
			
			String baseUri = info.getBaseUri().toASCIIString();
			String method = servletRequest.getMethod();
			String serverInfo = servletContext.getServerInfo();
			MultivaluedMap<String, String> headerInfo = headers.getRequestHeaders();
			String reqInfo = req.toString();
			String appInfo = app.toString();
			String configInfo = config.toString();
			String providerInfo = provider.toString();
			
			builder.append("BaseUri: ").append(baseUri).append("\n")
				.append("HTTP method: ").append(method).append("\n")
				.append("Server Info: ").append(serverInfo).append("\n")
				.append("Headers: ").append(headerInfo).append("\n")
				.append("Request: ").append(reqInfo).append("\n")
				.append("Application: ").append(appInfo).append("\n")
				.append("Configuration: ").append(configInfo).append("\n")
				.append("Providers: ").append(providerInfo);
			
			
			String output = builder.toString();
				
			return Response.status(200).entity(output).build();
		}		
}
